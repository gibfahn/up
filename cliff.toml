# configuration file for git-cliff
# see https://github.com/orhun/git-cliff#configuration-file

[changelog]

# changelog header
header = """
# Up Changelog

All notable changes to this project will be documented in this file.

The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).

"""

# template for the changelog body
# https://tera.netlify.app/docs/#introduction
body = """
{% if version %}\
    ## [{{ version }}](https://github.com/gibfahn/up/releases/tag/{{ version }}) ({{ timestamp | date(format="%Y-%m-%d") }})
{% else %}\
    ## [unreleased]
{% endif %}\
{% for group, commits in commits | group_by(attribute="group") %}
    ### {{ group | upper_first }}
    {% for commit in commits
    | filter(attribute="scope")
    | sort(attribute="scope") %}\
        - {% if commit.breaking %}[**BREAKING**] {% endif %}{% if commit.scope %}{{ commit.scope }}: {% endif %}{{ commit.message }} ([{{ commit.id | truncate(length=7, end="") }}](https://github.com/gibfahn/up/commit/{{ commit.id }}))\n\
    {% endfor %}
    {%- for commit in commits %}
        {%- if commit.scope -%}
        {% else -%}
        - {% if commit.breaking %}[**BREAKING**] {% endif %}{% if commit.scope %}{{ commit.scope }}: {% endif %}{{ commit.message }} ([{{ commit.id | truncate(length=7, end="") }}](https://github.com/gibfahn/up/commit/{{ commit.id }}))\n\
        {% endif -%}\
    {% endfor %}\
{% endfor %}

"""

# remove the leading and trailing whitespace from the template
trim = true

# changelog footer
footer = """
<!-- generated by git-cliff -->
"""

[git]
# parse the commits based on https://www.conventionalcommits.org
conventional_commits = true
# filter out the commits that are not conventional
filter_unconventional = false
# process each line of a commit as an individual commit
split_commits = false
# regex for preprocessing the commit messages
commit_preprocessors = [
    # Replace issue numbers
    { pattern = '\((\w+\s)?#([0-9]+)\)', replace = "([#${2}](https://github.com/gibfahn/up/issues/${2}))"}, # replace issue numbers
    # Replace commit IDs
    { pattern = "([ \\n])(([a-f0-9]{7})[a-f0-9]*)", replace = "${1}[${3}](https://github.com/gibfahn/up/commit/${2})"}
]
# regex for parsing and grouping commits
commit_parsers = [
    { message = "^feat", group = "Features"},
    { message = "^fix", group = "Bug Fixes"},
    { message = "^doc", group = "Documentation"},
    { message = "^perf", group = "Performance"},
    { message = "^refactor", group = "Refactor"},
    { message = "^style", group = "Styling", skip = true},
    { message = "^test", group = "Testing", skip = true},
    { message = "^ci", group = "CI", skip = true},
    { message = "^build", group = "Build", skip = true},
    { message = "^chore\\(release\\): prepare for", skip = true},
    { message = "^chore", group = "Miscellaneous Tasks", skip = true},
    { body = ".*security", group = "Security"},
    # Unconventional commits.
    { message = ".*", group = "Other", default_scope = "other"},
]
# protect breaking changes from being skipped due to matching a skipping commit_parser
protect_breaking_commits = true
# filter out the commits that are not matched by commit parsers
filter_commits = false
# glob pattern for matching git tags
tag_pattern = "v[0-9]*"
# regex for skipping tags
skip_tags = "v0.1.0-beta.1"
# regex for ignoring tags
ignore_tags = ""
# sort the tags topologically
topo_order = false
# sort the commits inside sections by oldest/newest order
sort_commits = "oldest"
# limit the number of commits included in the changelog.
# limit_commits = 42
